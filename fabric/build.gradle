plugins {
    id "com.github.johnrengelman.shadow" version "5.2.0"
}

repositories {
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

configurations {
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
}

architectury {
    platformSetupLoomIde()
    fabric()
}
def ENV = System.getenv();

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"

    //modRuntime 'com.github.CaffeineMC:Lithium-fabric:1.17.x~stable-SNAPSHOT'
    modRuntime "com.github.astei:lazydfu:0.1.2"
    //modRuntime "com.github.SuperCoder7979:databreaker:0.2.6"

    // Testing with /disguise command
    //modRuntime 'com.github.samolego.MobDisguises:mobdisguises-fabric:36167a1b02'

    implementation(project(path: ":common")) {
        transitive = false
    }
    developmentFabric(project(path: ":common")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "fabric"
}

jar {
    classifier "dev"
}

java {
    withSourcesJar()
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                classifier null
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {
        if (ENV.MAVEN_URL) {
            maven {
                credentials {
                    username ENV.MAVEN_USERNAME
                    password ENV.MAVEN_PASSWORD
                }
                url ENV.MAVEN_URL
            }
        } else {
            mavenLocal()
        }
    }
}
